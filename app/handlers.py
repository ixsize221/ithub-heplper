from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery
)
from app import keyboards as kb
from app import quest_ai
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import json
import os
from datetime import datetime

router = Router()

import sqlite3
import os
from collections import Counter

def init_db():
    db_path = 'university_bot.db'
    print(f"üìÅ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {os.path.abspath(db_path)}")

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute("PRAGMA table_info(questions)")
    columns = [column[1] for column in cursor.fetchall()]
    
    if 'category' not in columns:
        print("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ category –≤ —Ç–∞–±–ª–∏—Ü—É questions")
        cursor.execute('ALTER TABLE questions ADD COLUMN category TEXT DEFAULT "other"')
        conn.commit()
        print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ category —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            question_text TEXT NOT NULL UNIQUE,
            ask_count INTEGER DEFAULT 1,
            answer_text TEXT,
            is_common BOOLEAN DEFAULT FALSE,
            category TEXT DEFAULT 'other',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('SELECT COUNT(*) FROM questions')
    count = cursor.fetchone()[0]
    
    if count == 0:
        print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        initial_questions = [
            ("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ–± –æ–±—É—á–µ–Ω–∏–∏?", "–°–ø—Ä–∞–≤–∫—É –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞", "education"),
            ("–ì–¥–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –∏ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.", "education"),
            ("–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—â–µ–∂–∏—Ç–∏–µ?", "–ó–∞—è–≤–∫—É –º–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞.", "admission"),
            ("–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è?", "–ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É, –∑–∞–∫–ª—é—á–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä, –æ–ø–ª–∞—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ. –ï–ì–≠ –∏ –û–ì–≠ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è. –ì–ª–∞–≤–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ ‚Äî –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ (–∞—Ç—Ç–µ—Å—Ç–∞—Ç –∏–ª–∏ –¥–∏–ø–ª–æ–º). –£—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–∞—é—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏.", "admission")
        ]
        
        for question, answer, category in initial_questions:
            try:
                cursor.execute('''
                    INSERT INTO questions (question_text, answer_text, ask_count, is_common, category)
                    VALUES (?, ?, 10, TRUE, ?)
                ''', (question, answer, category))
            except sqlite3.IntegrityError as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏: {e}")
        
        conn.commit()
        print("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    conn.close()
    print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

init_db()

class QuestionForm(StatesGroup):
    waiting_for_question = State()
    waiting_for_custom_question = State()

def analyze_question(question: str) -> str:
    """–ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    question = question.lower()
    
    keywords = {
        "admission": ["–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "–ø–æ—Å—Ç—É–ø–∏—Ç—å", "–ø—Ä–∏–µ–º–Ω–∞—è", "–∫–æ–º–∏—Å—Å–∏—è", "–¥–æ–∫—É–º–µ–Ω—Ç—ã", "—ç–∫–∑–∞–º–µ–Ω—ã"],
        "education": ["–æ–±—É—á–µ–Ω–∏–µ", "—É—á–µ–±–∞", "–∑–∞–Ω—è—Ç–∏—è", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "—Å–µ—Å—Å–∏—è", "—ç–∫–∑–∞–º–µ–Ω—ã"],
        "specialties": ["—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–ø—Ä–æ—Ñ–µ—Å—Å–∏—è", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"]
    }
    
    for category, words in keywords.items():
        if any(word in question for word in words):
            return category
    
    return "other"

def add_question_to_db(question: str, answer: str = None):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('university_bot.db')
    cursor = conn.cursor()
    
    try:

        cursor.execute('''
            INSERT INTO questions (question_text, answer_text, category)
            VALUES (?, ?, ?)
        ''', (question, answer, analyze_question(question)))
    except sqlite3.IntegrityError:
        cursor.execute('''
            UPDATE questions 
            SET ask_count = ask_count + 1
            WHERE question_text = ?
        ''', (question,))
    
    conn.commit()
    conn.close()

def get_popular_questions(limit=5, category=None):
    conn = sqlite3.connect('university_bot.db')
    cursor = conn.cursor()
    
    if category:
        cursor.execute('''
            SELECT question_text, answer_text 
            FROM questions 
            WHERE category = ?
            ORDER BY ask_count DESC
            LIMIT ?
        ''', (category, limit))
    else:
        cursor.execute('''
            SELECT question_text, answer_text 
            FROM questions 
            ORDER BY ask_count DESC
            LIMIT ?
        ''', (limit,))
    
    questions = cursor.fetchall()
    conn.close()
    return questions

def get_category_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    conn = sqlite3.connect('university_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT category, COUNT(*) as count
        FROM questions
        GROUP BY category
    ''')
    
    stats = dict(cursor.fetchall())
    conn.close()
    return stats

def increment_question_count(question_text):
    conn = sqlite3.connect('university_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE questions 
        SET ask_count = ask_count + 1
        WHERE question_text = ?
    ''', (question_text,))
    conn.commit()
    conn.close()

@router.callback_query(F.data.startswith("popular_"))
async def show_pop(callback: CallbackQuery):
    index = int(callback.data.split("_")[1]) - 1
    popular_questions = get_popular_questions()
    
    if index < len(popular_questions):
        question, answer = popular_questions[index]
        increment_question_count(question)
        await callback.message.answer(f"‚ùì {question}\n\nüí¨ {answer}")
    else:
        await callback.message.answer("‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
class AnswerForm(StatesGroup):
    waiting_for_reply = State()

class GPTForm(StatesGroup):
    text = State()

rektor_id = 7844311755

questions = {}

@router.message(CommandStart())
async def start_bot(message: types.Message):
    await message.answer(
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å üòä\n\n"
    "üëá –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, –∏ –º—ã –Ω–∞—á–Ω—ë–º –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ!", 
    reply_markup=await kb.main_kb())

@router.callback_query(F.data == 'quest1')
async def step_ai(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text('–≤–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –î–ì–¢–£?')
    await state.set_state(GPTForm.text)

@router.message(F.text, GPTForm.text)
async def main_GPT(message: types.Message, state: FSMContext):
    status = await message.answer('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...')
    text = await quest_ai.ask_gpt(prompt=message.text)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_question_to_db(message.text, text)
    
    await status.edit_text(f'{text}')
    await state.clear()

@router.callback_query(F.data == "quests")
async def main_cmd(call: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    stats = get_category_stats()
    
    keyboard_buttons = []
    keyboard_buttons.append([InlineKeyboardButton(text='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏', callback_data='quest1')])
    

    categories = {
        "admission": "üìö –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ",
        "education": "üéì –û–±—É—á–µ–Ω–∏–µ",
        "specialties": "üíº –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
        "other": "‚ùì –ü—Ä–æ—á–µ–µ"
    }
    
    for category, title in categories.items():
        if category in stats and stats[category] > 0:
            keyboard_buttons.append([InlineKeyboardButton(
                text=f"{title} ({stats[category]})",
                callback_data=f"category_{category}"
            )])
    
    keyboard_buttons.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
    popular_questions_markup = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await call.message.edit_text('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:', reply_markup=popular_questions_markup)

@router.callback_query(F.data.startswith("category_"))
async def show_category_questions(callback: CallbackQuery):
    category = callback.data.replace("category_", "")
    questions = get_popular_questions(limit=5, category=category)
    
    keyboard_buttons = []
    for i, (question_text, _) in enumerate(questions):
        keyboard_buttons.append([InlineKeyboardButton(
            text=question_text,
            callback_data=f'popular_{i+1}'
        )])
    
    keyboard_buttons.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='quests')])
    questions_markup = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    category_titles = {
        "admission": "üìö –í–æ–ø—Ä–æ—Å—ã –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏",
        "education": "üéì –í–æ–ø—Ä–æ—Å—ã –æ–± –æ–±—É—á–µ–Ω–∏–∏",
        "specialties": "üíº –í–æ–ø—Ä–æ—Å—ã –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è—Ö",
        "other": "‚ùì –ü—Ä–æ—á–∏–µ –≤–æ–ø—Ä–æ—Å—ã"
    }
    
    await callback.message.edit_text(
        f"{category_titles.get(category, '–í–æ–ø—Ä–æ—Å—ã')}:",
        reply_markup=questions_markup
    )

@router.callback_query(F.data == 'back_to_main')
async def back_to_main_menu(call: CallbackQuery):
    await call.message.edit_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å üòä\n\n"\
        "üëá –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, –∏ –º—ã –Ω–∞—á–Ω—ë–º –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ!", 
        reply_markup=await kb.main_kb()
    )

@router.callback_query(F.data == 'anon')
async def text_anon(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å')
    await state.set_state(QuestionForm.waiting_for_question)

@router.message(QuestionForm.waiting_for_question)
async def receive_question(message: types.Message, state: FSMContext):
    question = message.text
    user_id = message.from_user.id
    
    add_question_to_db(question)
    
    await message.bot.send_message(
        chat_id=rektor_id,
        text=f"üì© –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞:\n\n{question}",
        reply_markup=await kb.answer_quest(user_id)
    )
    
    await message.answer('‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–∫—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ! ')
    await state.clear()

@router.callback_query(F.data.startswith("answer_"))
async def answer_question(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[1])
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(AnswerForm.waiting_for_reply)
    await state.update_data(user_id=user_id)

@router.message(AnswerForm.waiting_for_reply)
async def receive_answer(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    question_id = data['user_id']
    
    await message.bot.send_message(
        chat_id=question_id,
        text=f"üì¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{answer}"
    )
    
    await message.answer("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
    await state.clear()

    
    

    
